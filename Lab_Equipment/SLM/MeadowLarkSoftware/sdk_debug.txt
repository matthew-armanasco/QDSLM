Started at 20:56:16 on 5/30/2025
 Hardware counter period is 0.100 us.
 Hi_timer minimum timer interval is 0.000 to 0.100 us.
 Minimum forced delay is around 0.200 us.
Setting logging interval units to [us].
    515816: Number of platforms detected: 4
Platform vendor: NVIDIA Corporation
Platform   name: NVIDIA CUDA
Platformversion: OpenCL 3.0 CUDA 12.9.76
Platform vendor: Intel(R) Corporation
Platform   name: Intel(R) OpenCL
Platformversion: OpenCL 3.0 WINDOWS
Platform vendor: Intel(R) Corporation
Platform   name: Intel(R) FPGA Emulation Platform for OpenCL(TM)
Platformversion: OpenCL 1.2 Intel(R) FPGA SDK for OpenCL(TM), Version 20.3
Platform vendor: Intel(R) Corporation
Platform   name: Intel(R) FPGA SDK for OpenCL(TM)
Platformversion: OpenCL 1.0 Intel(R) FPGA SDK for OpenCL(TM), Version 2022.1

         2: Get_cl_platforms 1(0x 0000 0001)
         6: devices.size() 1(0x 0000 0000 0000 0001)
         0: Found GPU on platform index 0(0x 0000 0000 0000 0000)
         0: One Device Found?  1(0x 0000 0001)
    142545: Make_cl_context_queue_program  1(0x 0000 0001)
         5: // These macros may be defined in the Python or C++ code that builds these
// kernels:
// SPECIFY_LOCAL_WORKGROUP_SIZE - either defined or not, decides whether the
//                                CL_WORKGROUP macro is used.
// CL_WORKGROUP                 - specifies the workgroup size for the kernel,
//                                for example:
//                                __attribute__((reqd_work_group_size(256,1,1)))

__constant sampler_t sampler_corr_lut = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_LINEAR;

inline unsigned char float_to_uchar(float f)
{
	return (unsigned char)floor(f * 255.0f);
}

#define FLT_MAX_PIXEL         (255.0f)
#define N_WAVES               (1.0f)

// -------------------------------- RegionalLUT ----------------------------------------
__kernel
#ifdef SPECIFY_LOCAL_WORKGROUP_SIZE
CL_WORKGROUP
#endif
void RegionalLUT(const float Scale,
		const float RLMax,
		const float RLMin,
		__global uchar* Img_buffer,
		__global uchar* Ret_Img_buffer,
		__read_only image3d_t static_regional_lut)
{

	const unsigned int xid = get_global_id(0);
	const unsigned int yid = get_global_id(1);
	const unsigned int id = xid + yid * get_global_size(0);

	const float xid_f = (float)get_global_id(0);
	const float yid_f = (float)get_global_id(1);
	const float  pix_dim = (float)get_global_size(0U);
	const float2 pos = (float2)(xid_f / pix_dim, yid_f / pix_dim); // Normalized

	float target_phase = ((float)Img_buffer[id]) / FLT_MAX_PIXEL;
	target_phase = read_imagef(static_regional_lut, sampler_corr_lut, (float4)(pos.x, Scale*pos.y, target_phase, 0.f)).x;
	// Ensure target_phase is in range [0.0, 1.0].
	// fmin(x, y) returns y if y < x, otherwise it returns x.
	// fmax(x, y) returns y if x < y, otherwise it returns x.
	target_phase = fmax(fmin(target_phase, 1.0f), 0.0f);
	Ret_Img_buffer[id] = float_to_uchar((target_phase - RLMin) / (RLMax - RLMin));
  return;
}

         0: Decrypted kernel  1(0x 0000 0001)
         2: Entering Build program  1(0x 0000 0001)
      9126: Build program Complete 1(0x 0000 0001)
         1: Make_cl_context_queue_program  1(0x 0000 0001)
        16: Init buffers  1(0x 0000 0001)
        30: Init cl kernel  1(0x 0000 0001)